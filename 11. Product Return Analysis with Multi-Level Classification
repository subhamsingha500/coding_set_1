//Scala_Spark

import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions._

val spark = SparkSession.builder
  .appName("Return_Analysis")
  .getOrCreate()

import spark.implicits._

val products = List(
("Laptop", "Electronics", 120, 45),
("Smartphone", "Electronics", 80, 60),
("Tablet", "Electronics", 50, 72),
("Headphones", "Accessories", 110, 47),
("Shoes", "Clothing", 90, 55),
("Jacket", "Clothing", 30, 80),
("TV", "Electronics", 150, 40),
("Watch", "Accessories", 60, 65),
("Pants", "Clothing", 25, 75),
("Camera", "Electronics", 95, 58)
).toDF("product_name", "category", "return_count", "satisfaction_score")

val workdf = products.withColumn("Return_rate",
   when(col("return_count")>100 && col("satisfaction_score")<50, "High Return Rate")
   .when(col("return_count").between(50,100) && col("satisfaction_score").between(50,70),"Moderate Return Rate")
   .otherwise("Low Return Rat"))

workdf.show()
val agg_return_rate = workdf.groupBy("category").agg(sum("return_count"))

agg_return_rate.show()


//PySpark

%python
from pyspark.sql import SparkSession
from pyspark.sql.functions import col, when, initcap , sum

spark = SparkSession.builder.appName("Return_Analysis").getOrCreate()



products = [
("Laptop", "Electronics", 120, 45),
("Smartphone", "Electronics", 80, 60),
("Tablet", "Electronics", 50, 72),
("Headphones", "Accessories", 110, 47),
("Shoes", "Clothing", 90, 55),
("Jacket", "Clothing", 30, 80),
("TV", "Electronics", 150, 40),
("Watch", "Accessories", 60, 65),
("Pants", "Clothing", 25, 75),
("Camera", "Electronics", 95, 58)
]
products_df = spark.createDataFrame(products, ["product_name", "category", "return_count",
"satisfaction_score"])

workdf = products_df \
.withColumn("Return_rate",
   when((col("return_count")>100) & (col("satisfaction_score")<50), "High Return Rate")
   .when(col("return_count").between(50,100) & col("satisfaction_score").between(50,70),"Moderate Return Rate")
   .otherwise("Low Return Rat"))

workdf.show()
agg_return_rate = workdf.groupBy("category").agg(sum("return_count"))

agg_return_rate.show()
